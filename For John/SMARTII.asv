%This script generates moving noise
%   creates several frames of noise and plays by picking a random one 
Screen('Preference', 'SkipSyncTests', 1) %REMOVE THIS LATER!!!!
% Clear the workspace and the screen
sca;
close all;
clearvars;
%--------------------
% INITIAL SET-UP
%--------------------
%BLOCK PARAMETERS
VCoherence = 1;
ACoherence = 1;
AVCoherence = 1;

% Setup PTB with some default values
PsychDefaultSetup(2);

% Set the screen number to the external secondary monitor if there is one
% connected
screenNumber = max(Screen('Screens'));

% Define black, white and grey
white = WhiteIndex(screenNumber);
black = BlackIndex(screenNumber);
grey = white / 2;

% Open the screen
[window, windowRect] = PsychImaging('OpenWindow', screenNumber, grey, [], 32, 2,...
    [], [],  kPsychNeed32BPCFloat);

%Query the time duration
ifi = Screen('GetFlipInterval', window);

%Set the text font and size
Screen('TextFont', window, 'Ariel');
Screen('TextSize', window, 40);

%Query the maximum priority level
topPriorityLevel = MaxPriority(window);

%Get the center coordinate of the window
[xCenter, yCenter] = RectCenter(windowRect);

%random seed
rand('seed', sum(100 * clock));

% Set up alpha-blending for smooth (anti-aliased) lines
Screen('BlendFunction', window, 'GL_SRC_ALPHA', 'GL_ONE_MINUS_SRC_ALPHA');


%--------------------
% AUDITORY SET UP STUFF
%--------------------
% Initialize Sounddriver
InitializePsychSound(1);

% Number of channels and sample rate
nrchannels = 2;
sampleFreq = 48000;

%Volume %
volume = 0.5;

%Other Stuff
startCue = 0;
repetitions = 1;
waitForDeviceStart = 1;
%% --------------------
% Timing
%--------------------
preCIDuration = 1000;
cueDuration = 500;
postCIDuration = [500 1000];
stimDuration = 100;
%% --------------------
% Visual Noise Parameters & Generation
%--------------------
length = 500;
width = 500;
waitframes = 1;

timeSecs = vsDuration/1000;
timeFrames = round(timeSecs ./ ifi);

%Centering texture in center of window
xPos = xCenter;
yPos = yCenter;
baseRect = [0 0 length width];
rectCenter = CenterRectOnPointd(baseRect, xPos, yPos);

%Generating Noise Textures
numTextures = 100;
noise = rand(width, length, numTextures);
for i = 1:numTextures
    textures(i) = Screen('MakeTexture', window, noise(:,:, i));
end 

%--------------------
% Cue Production
%--------------------
visualCueDiameter = 50;
visualCue = zeros(visualCueDiameter);
cueRect = [0 0 length width];
cueRectCenter = CenterRectOnPointd(cueRect, xPos, yPos);

for frame = 1:round(refreshRate * cueDuration/1000)
    for y = 1:visualCueDiameter
        for x = 1:visualCueDiameter
            if (x-visualCueDiameter/2)^2 + (y-visualCueDiameter/2)^2 <= (visualCueDiameter/2)^2
                visualCue(y,x) = 1;
            else 
                visualCue(y,x) = rand(1);
            end
            
        end
    end
    visualCueMatrix = EmbedInEfficientApperature(visualCue, noise(:, :, round(rand(1) * (numTextures- 1) + 1))); 
    cueTextures(frame) = Screen('MakeTexture', window, visualCueMatrix);
end

%--------------------
% Visual Gabor Paremeters
%--------------------
gaborLength = 300;
gaborWidth = gaborLength;

sigma = 50;
lambda = 50;
A = 1;

gabor = CreateGabor2(gaborWidth, sigma, lambda, 'r', 'r', A);

blank = Screen('MakeTexture', window, 0);
%--------------------
% Pure Visual Block
%--------------------
while VCoherence > 0

AnimationTextures = [];

%preCI
AnimationTextures = AnimateVisualNoise(AnimationTextures, textures, preCIDuration, ifi);
%Cue
AnimationTextures = AnimateTextureMatrix(AnimationTextures, cueTextures, cueDuration, ifi);
%PostCI
AnimationTextures = AnimateVisualNoise(AnimationTextures, textures, postCIDuration, ifi);
%Target Gabor
AnimationTextures = AnimateNoisyGabor(AnimationTextures, gabor, noise, VCoherence, stimDuration, ifi, window);
%preCI response period
AnimationTextures = AnimateVisualNoise(AnimationTextures, textures, preCIDuration, ifi);

%Playing Back Animation
vbl = PlayVisualAnimation(AnimationTextures, window, 0, ifi, 0, 0, 0, 0, rectCenter);

VCoherence = VCoherence - .1
end

%% --------------------
% Pure Auditory
%--------------------
% Auditory Parameters
frequency = 1000;
cueFrequency = 500;

%Open audio port
pahandle = PsychPortAudio('Open', [], 1, 1, sampleFreq, nrchannels, [], [], [], []);

while audCoherence > 0
    %Generating WAVS
    ACoherence
    CreateAuditoryNoise(preCIDuration, sampleFreq, 'PreCI1.WAV');
    CreateNoisyWAV(cueFrequency, .9, cueDuration, sampleFreq, 'Cue.WAV');
    CreateAuditoryNoise(postCIDuration, sampleFreq, 'PostCI.WAV');
    CreateNoisyWAV(frequency, audCoherence, stimDuration, sampleFreq, 'TargetTone.WAV');
    CreateAuditoryNoise(preCIDuration, sampleFreq, 'PreCI2.WAV');    
    
    y1 = audioread('PreCI1.WAV');
    y1(:, 2) = y1(:, 1);
    y2 = audioread('Cue.WAV');
    y2(:, 2) = y2(:, 1);
    y3 = audioread('PostCI.WAV');
    y3(:, 2) = y3(:, 1);
    y4 = audioread('TargetTone.WAV');
    y4(:, 2) = y4(:, 1);
    y5 = audioread('PreCI2.WAV');
    y5(:, 2) = y5(:, 1);    
    
    y = [y1; y2; y3; y4; y5];
    y = y';
    
    PsychPortAudio('FillBuffer', pahandle, y);
    PsychPortAudio('Start', pahandle, repetitions, startCue, waitForDeviceStart);
    PsychPortAudio('Stop', pahandle, 1, 1);
    ACoherence = ACoherence - 1
end 

%% --------------------
%Multisensory Playback
%--------------------
%AV Noise #1
while AVCoherence > 0
    AVCoherence
    %auditory pregeneration
    CreateAuditoryNoise(preCIDuration, sampleFreq, 'PreCI1.WAV');
    CreateNoisyWAV(cueFrequency, .9, cueDuration, sampleFreq, 'Cue.WAV');
    CreateAuditoryNoise(postCIDuration, sampleFreq, 'PostCI.WAV');
    CreateNoisyWAV(frequency, audCoherence, stimDuration, sampleFreq, 'TargetTone.WAV');
    CreateAuditoryNoise(preCIDuration, sampleFreq, 'PreCI2.WAV');  
    
    y1 = audioread('PreCI1.WAV');
    y1(:, 2) = y1(:, 1);
    y1 = y1';
    y2 = audioread('Cue.WAV');
    y2(:, 2) = y2(:, 1);
    y2 = y2';
    y3 = audioread('PostCI.WAV');
    y3(:, 2) = y3(:, 1);
    y3 = y3';
    y4 = audioread('TargetTone.WAV');
    y4(:, 2) = y4(:, 1);
    y4 = y4';
    y5 = audioread('PreCI2.WAV');
    y5(:, 2) = y5(:, 1);    
    
    y = [y1; y3; y2];
    y = y';
    
    AnimationTextures = [];
    
    %Generating Noise
    AnimationTextures = AnimateVisualNoise(AnimationTextures, textures, vnDuration, ifi);
    
    %Generating Noisy Gabor
    AnimationTextures = AnimateNoisyGabor(AnimationTextures, gabor, noise, AVCoherence, vsDuration, ifi, window);
    
    %Generating Noise
    AnimationTextures = AnimateVisualNoise(AnimationTextures, textures, vnDuration, ifi);
    
    %Play Back AV Animation
    vbl = PlayAVAnimation(AnimationTextures, y, pahandle, volume, window, 0, ifi, 0, 0, 0, 0, rectCenter);
    
    AVCoherence = AVCoherence - .1;
end
PsychPortAudio('Close', pahandle);
